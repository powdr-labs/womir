This files describes all the optimizations ideas we left out for now.

- [block_tree]: track whether a block is ever broken to (explicitly or
  implictly), so that we know if anything after it is dead code to be
  removed. Dead code removal translates to less data dependency in the
  DAG, which translates to possibly less data copies in the final code.
  But there shouldn't be any already, if the WASM is from an optimizing
  compiler.

- [dag]: locals that are written inside a block, but not read
  after that block (in optimized code, this happens inside loops), will
  propagate this superfluous output to all the outer blocks, that might
  generate a lot of useless copies. Remove unused outputs from blocks.
  Judging by vec_median compilation, this is very important!

- [dag]: if the final ISA supports instructions that
  operate on constants, like `addi $result, $input, 42`, then the DAG
  could be optimized to take advantage of this by folding constant
  values into the instructions that can use them.

- [dag]: either as a consequence of the previous point, or because
  spurious consts are generated by the compiler, there might
  remain orphaned Const nodes in the DAG. These nodes should be
  eliminated.

- [dag]: as a generalization of the previous point, if the output of
  **pure** nodes are not used by any other node, they can be removed.
  It requires knowing what nodes have side effects or not. This is
  not as important as the case of Const nodes, if we assume optimized
  WASM.

- [locals_data_flow]: track locals permutation. If some locals are read into
  a block, but in the end they are just output unmodified (either on stack
  or on some local), this can be resolved statically when building the DAG,
  eliding copies.

- [locals_data_flow]: sometimes a loop needs to take locals as inputs
  just to output them in certain breaks, unmodified. Such locals would
  have to be copied over through all the iterations, but never actually
  used inside the loop. In such cases, it is worth to make these breaks
  indirect, by creating blocks surrounding the loop just to forward the
  breaks. The passthrough locals will be handled by the outside blocks
  and breaks, avoiding them to be copied into the loop.

- [register_allocation]: also perform optimistic allocation on the nodes
  that generates outputs to returns in the top-level frame, because they
  are local frame writes like any local break.

- [register_allocation]: the register allocation is not perfectly optimal,
  it just uses a greedy approach to assign registers, and give up when it
  detects a conflict. It may be possible to model the problem to a SAT
  solver or something like that.

- if there are more than one loop nested inside each other, and the inner
  loop falls through the outer loop, which then breaks or falls through
  again, it is better to have the inner loop break directly to the final
  destination instead of going through multiple frame barriers, because
  each frame barrier potentially adds multiple copies.

- after flattening the DAG, there might remain Jump instructions that
  targets a label that follows immediately. These Jumps can be eliminated.
  This is important even when compiling an optimized WASM, because
  the Br nodes are added explicitly during the DAG processing, even
  on blocks that falls through. This is needed to properly handle
  the data flow from breaks to labels. And these Br nodes may generate
  these superfluous Jumps.

- [tail call]: a call immediately followed by a return can be optimized
  to a tail call. We can even do this for calls where its outputs
  are not related to the return values, because we can determine the
  return registers before the tail call.
